1.正则表达式的四大作用:分割,查找,匹配,替换字符串
2.分隔符: 正斜斜(/)
3.通用原子:
	\d : 匹配一个数字字符。等价于 [0-9]。
	\D : 匹配一个非数字字符。等价于 [^0-9]。 
	\w : 匹配字母、数字、下划线。等价于'[A-Za-z0-9_]'。
	\W : 匹配非字母、数字、下划线。等价于 '[^A-Za-z0-9_]'。
	\s : 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。
	\S : 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。
4.元字符:
	. : 匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 '\n' 在内的任何字符，请使用像"(.|\n)"的模式。
	* : 匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。
	? : 匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 或 "does" 。? 等价于 {0,1}。
	^ : 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\n' 或 '\r' 之后的位置。(通俗:以什么开头)
	$ : 匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\n' 或 '\r' 之前的位置。(通俗:以什么结尾)
	+ : 匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。
	{n} : n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。
	{n,} : n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。
	{n,m} : m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，"o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。
	[] :字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 "plain" 中的 'a'。
	() :
	[^] : 负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 "plain" 中的'p'、'l'、'i'、'n'。
	| : 匹配 x 或 y。例如，'z|food' 能匹配 "z" 或 "food"。'(z|f)ood' 则匹配 "zood" 或 "food"。
	[-] :字符范围。匹配指定范围内的任意字符。例如，'[a-z]' 可以匹配 'a' 到 'z' 范围内的任意小写字母字符。
4.模式修正符:
	i : 
	m : 
	e :
	s :
	U :
	x :
	A :
	D :
	u :
5.后向引用
6.贪婪模式
7.正则表达式PCRE函数:preg_match()、preg_match_all()、preg_replace()、preg_split()
8.匹配中文
